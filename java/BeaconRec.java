/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BeaconRec'
 * message type.
 */

public class BeaconRec extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 11;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 80;

    /** Create a new BeaconRec of size 11. */
    public BeaconRec() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BeaconRec of the given data_length. */
    public BeaconRec(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconRec with the given data_length
     * and base offset.
     */
    public BeaconRec(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconRec using the given byte array
     * as backing store.
     */
    public BeaconRec(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconRec using the given byte array
     * as backing store, with the given base offset.
     */
    public BeaconRec(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconRec using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BeaconRec(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconRec embedded in the given message
     * at the given base offset.
     */
    public BeaconRec(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconRec embedded in the given message
     * at the given base offset and length.
     */
    public BeaconRec(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BeaconRec> \n";
      try {
        s += "  [idAnchor=0x"+Long.toHexString(get_idAnchor())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timestamp=0x"+Long.toHexString(get_timestamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssi=0x"+Long.toHexString(get_rssi())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [coordinate_x=0x"+Long.toHexString(get_coordinate_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [coordinate_y=0x"+Long.toHexString(get_coordinate_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: idAnchor
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'idAnchor' is signed (false).
     */
    public static boolean isSigned_idAnchor() {
        return false;
    }

    /**
     * Return whether the field 'idAnchor' is an array (false).
     */
    public static boolean isArray_idAnchor() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'idAnchor'
     */
    public static int offset_idAnchor() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'idAnchor'
     */
    public static int offsetBits_idAnchor() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'idAnchor'
     */
    public int get_idAnchor() {
        return (int)getUIntBEElement(offsetBits_idAnchor(), 16);
    }

    /**
     * Set the value of the field 'idAnchor'
     */
    public void set_idAnchor(int value) {
        setUIntBEElement(offsetBits_idAnchor(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'idAnchor'
     */
    public static int size_idAnchor() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'idAnchor'
     */
    public static int sizeBits_idAnchor() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timestamp
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timestamp' is signed (false).
     */
    public static boolean isSigned_timestamp() {
        return false;
    }

    /**
     * Return whether the field 'timestamp' is an array (false).
     */
    public static boolean isArray_timestamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timestamp'
     */
    public static int offset_timestamp() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timestamp'
     */
    public static int offsetBits_timestamp() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'timestamp'
     */
    public long get_timestamp() {
        return (long)getUIntBEElement(offsetBits_timestamp(), 32);
    }

    /**
     * Set the value of the field 'timestamp'
     */
    public void set_timestamp(long value) {
        setUIntBEElement(offsetBits_timestamp(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'timestamp'
     */
    public static int size_timestamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timestamp'
     */
    public static int sizeBits_timestamp() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssi
    //   Field type: byte, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssi' is signed (false).
     */
    public static boolean isSigned_rssi() {
        return false;
    }

    /**
     * Return whether the field 'rssi' is an array (false).
     */
    public static boolean isArray_rssi() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssi'
     */
    public static int offset_rssi() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssi'
     */
    public static int offsetBits_rssi() {
        return 48;
    }

    /**
     * Return the value (as a byte) of the field 'rssi'
     */
    public byte get_rssi() {
        return (byte)getSIntBEElement(offsetBits_rssi(), 8);
    }

    /**
     * Set the value of the field 'rssi'
     */
    public void set_rssi(byte value) {
        setSIntBEElement(offsetBits_rssi(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssi'
     */
    public static int size_rssi() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssi'
     */
    public static int sizeBits_rssi() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: coordinate_x
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'coordinate_x' is signed (false).
     */
    public static boolean isSigned_coordinate_x() {
        return false;
    }

    /**
     * Return whether the field 'coordinate_x' is an array (false).
     */
    public static boolean isArray_coordinate_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'coordinate_x'
     */
    public static int offset_coordinate_x() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'coordinate_x'
     */
    public static int offsetBits_coordinate_x() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'coordinate_x'
     */
    public int get_coordinate_x() {
        return (int)getUIntBEElement(offsetBits_coordinate_x(), 16);
    }

    /**
     * Set the value of the field 'coordinate_x'
     */
    public void set_coordinate_x(int value) {
        setUIntBEElement(offsetBits_coordinate_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'coordinate_x'
     */
    public static int size_coordinate_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'coordinate_x'
     */
    public static int sizeBits_coordinate_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: coordinate_y
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'coordinate_y' is signed (false).
     */
    public static boolean isSigned_coordinate_y() {
        return false;
    }

    /**
     * Return whether the field 'coordinate_y' is an array (false).
     */
    public static boolean isArray_coordinate_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'coordinate_y'
     */
    public static int offset_coordinate_y() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'coordinate_y'
     */
    public static int offsetBits_coordinate_y() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'coordinate_y'
     */
    public int get_coordinate_y() {
        return (int)getUIntBEElement(offsetBits_coordinate_y(), 16);
    }

    /**
     * Set the value of the field 'coordinate_y'
     */
    public void set_coordinate_y(int value) {
        setUIntBEElement(offsetBits_coordinate_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'coordinate_y'
     */
    public static int size_coordinate_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'coordinate_y'
     */
    public static int sizeBits_coordinate_y() {
        return 16;
    }

}
