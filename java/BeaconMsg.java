/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BeaconMsg'
 * message type.
 */

public class BeaconMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 10;

    /** Create a new BeaconMsg of size 8. */
    public BeaconMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BeaconMsg of the given data_length. */
    public BeaconMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconMsg with the given data_length
     * and base offset.
     */
    public BeaconMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconMsg using the given byte array
     * as backing store.
     */
    public BeaconMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public BeaconMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BeaconMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconMsg embedded in the given message
     * at the given base offset.
     */
    public BeaconMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BeaconMsg embedded in the given message
     * at the given base offset and length.
     */
    public BeaconMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BeaconMsg> \n";
      try {
        s += "  [anchor_id=0x"+Long.toHexString(get_anchor_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [coordinate_x=0x"+Long.toHexString(get_coordinate_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [coordinate_y=0x"+Long.toHexString(get_coordinate_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [beacon_period=0x"+Long.toHexString(get_beacon_period())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: anchor_id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'anchor_id' is signed (false).
     */
    public static boolean isSigned_anchor_id() {
        return false;
    }

    /**
     * Return whether the field 'anchor_id' is an array (false).
     */
    public static boolean isArray_anchor_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'anchor_id'
     */
    public static int offset_anchor_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'anchor_id'
     */
    public static int offsetBits_anchor_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'anchor_id'
     */
    public int get_anchor_id() {
        return (int)getUIntBEElement(offsetBits_anchor_id(), 16);
    }

    /**
     * Set the value of the field 'anchor_id'
     */
    public void set_anchor_id(int value) {
        setUIntBEElement(offsetBits_anchor_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'anchor_id'
     */
    public static int size_anchor_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'anchor_id'
     */
    public static int sizeBits_anchor_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: coordinate_x
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'coordinate_x' is signed (false).
     */
    public static boolean isSigned_coordinate_x() {
        return false;
    }

    /**
     * Return whether the field 'coordinate_x' is an array (false).
     */
    public static boolean isArray_coordinate_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'coordinate_x'
     */
    public static int offset_coordinate_x() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'coordinate_x'
     */
    public static int offsetBits_coordinate_x() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'coordinate_x'
     */
    public int get_coordinate_x() {
        return (int)getUIntBEElement(offsetBits_coordinate_x(), 16);
    }

    /**
     * Set the value of the field 'coordinate_x'
     */
    public void set_coordinate_x(int value) {
        setUIntBEElement(offsetBits_coordinate_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'coordinate_x'
     */
    public static int size_coordinate_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'coordinate_x'
     */
    public static int sizeBits_coordinate_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: coordinate_y
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'coordinate_y' is signed (false).
     */
    public static boolean isSigned_coordinate_y() {
        return false;
    }

    /**
     * Return whether the field 'coordinate_y' is an array (false).
     */
    public static boolean isArray_coordinate_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'coordinate_y'
     */
    public static int offset_coordinate_y() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'coordinate_y'
     */
    public static int offsetBits_coordinate_y() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'coordinate_y'
     */
    public int get_coordinate_y() {
        return (int)getUIntBEElement(offsetBits_coordinate_y(), 16);
    }

    /**
     * Set the value of the field 'coordinate_y'
     */
    public void set_coordinate_y(int value) {
        setUIntBEElement(offsetBits_coordinate_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'coordinate_y'
     */
    public static int size_coordinate_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'coordinate_y'
     */
    public static int sizeBits_coordinate_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: beacon_period
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'beacon_period' is signed (false).
     */
    public static boolean isSigned_beacon_period() {
        return false;
    }

    /**
     * Return whether the field 'beacon_period' is an array (false).
     */
    public static boolean isArray_beacon_period() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'beacon_period'
     */
    public static int offset_beacon_period() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'beacon_period'
     */
    public static int offsetBits_beacon_period() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'beacon_period'
     */
    public int get_beacon_period() {
        return (int)getUIntBEElement(offsetBits_beacon_period(), 16);
    }

    /**
     * Set the value of the field 'beacon_period'
     */
    public void set_beacon_period(int value) {
        setUIntBEElement(offsetBits_beacon_period(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'beacon_period'
     */
    public static int size_beacon_period() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'beacon_period'
     */
    public static int sizeBits_beacon_period() {
        return 16;
    }

}
